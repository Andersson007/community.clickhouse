####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- name: Create a test dabase
  community.clickhouse.clickhouse_client:
    execute: CREATE DATABASE IF NOT EXISTS foo

- name: Create a test table
  register: result
  community.clickhouse.clickhouse_client:
    login_host: localhost
    execute: >
      CREATE TABLE IF NOT EXISTS foo.test_table1
      (x String) ENGINE = Memory
    execute_kwargs:
      types_check: false

- name: Insert into test table using named args
  register: result
  community.clickhouse.clickhouse_client:
    execute: "INSERT INTO foo.test_table1 (x) VALUES (%(a)s), (%(b)s), (%(c)s)"
    execute_kwargs:
      params:
        a: one
        b: two
        c: three

- name: Create a test table 2
  register: result
  community.clickhouse.clickhouse_client:
    login_host: localhost
    execute: >
      CREATE TABLE IF NOT EXISTS foo.test_table2
      (y String, z String) ENGINE = Memory
    execute_kwargs:
      types_check: false

- name: Insert into test table using named args
  register: result
  community.clickhouse.clickhouse_client:
    execute: "INSERT INTO foo.test_table2 (y, z) VALUES (%(a)s, %(b)s)"
    execute_kwargs:
      params:
        a: one
        b: two

- name: Create a test user
  community.clickhouse.clickhouse_user:
    state: present
    name: alice
    password: querty

- name: Check the user exists
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check user's grants, they are empty
  ansible.builtin.assert:
    that:
    - result["users"]["alice"]["grants"] == []

- name: Grant privs to non-existent grantee, must fail
  register: result
  ignore_errors: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: notexists
    privileges:
     - object: '*.*'
       privs:
         TEST: false

- name: Check that it failed
  ansible.builtin.assert:
    that:
    - result is failed
    - result.msg is search("does not exist")

- name: Grant initial privileges to alice
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
      - object: '*.*'
        privs:
          "CREATE USER": false

- name: Check initial grant
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 3

- name: Run the same grant again to check for idempotency
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
      - object: '*.*'
        privs:
          "CREATE USER": false

- name: Check idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

- name: Append privileges with exclusive=false (default)
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
          "DELETE": true
      - object: '*.*'
        privs:
          "CREATE USER": false
          "ALTER USER": true

- name: Check appended privileges
  ansible.builtin.assert:
    that:
    - result is changed
    - >
      result.executed_statements | sort ==
      [
        'GRANT ALTER USER ON *.* TO alice WITH GRANT OPTION',
        'GRANT DELETE ON foo.* TO alice WITH GRANT OPTION'
      ] | sort

- name: Grant privileges with exclusive=true
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table1'
        privs:
          "SELECT(x)": false

- name: Check exclusive grant
  ansible.builtin.assert:
    that:
    - result is changed
    # 2 revokes and 1 grant
    - result.executed_statements | length == 3

- name: Run exclusive grant again for idempotency
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table1'
        privs:
          "SELECT(x)": false

- name: Check exclusive grant idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

- name: Revoke all from alice for cleanup
  community.clickhouse.clickhouse_client:
    execute: "REVOKE ALL ON *.* FROM alice"

- name: Grant privileges in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": false

- name: Check grant in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 1
    - result.executed_statements[0] == 'GRANT SELECT ON foo.* TO alice'

- name: Get user info to verify no changes were made
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert no grants for alice after check mode run
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] == []

# Test appending in check mode with existing grants
- name: Grant some initial privileges to alice for check mode append test
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false

- name: Append privileges with exclusive=false in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: false
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
          "ALTER DELETE": true

- name: Check append in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 1
    - result.executed_statements[0] == 'GRANT ALTER DELETE ON foo.* TO alice WITH GRANT OPTION'

- name: Get user info to verify check mode didn't actually change grants
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert alice still has only the initial grants (ALTER DELETE not added)
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] | length == 2
    - "'ALTER DELETE' not in result_info['users']['alice']['grants'] | join(' ')"

- name: Run the append again in check mode (idempotency test)
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: false
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
          "ALTER DELETE": true

- name: Check append idempotency in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 1

# Test exclusive mode in check mode
- name: Replace all privileges with exclusive=true in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table2'
        privs:
          "SELECT(y)": false

- name: Check exclusive mode in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    # Should revoke SELECT and INSERT on foo.*, then grant SELECT(y) on foo.test_table2
    - result.executed_statements | length == 2

- name: Get user info to verify check mode didn't actually change grants
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert alice still has the original grants (not replaced)
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] | length == 2
    - "'foo.*' in result_info['users']['alice']['grants'] | join(' ')"

# Test actual append (not check mode) to verify it works after check mode
- name: Actually append ALTER DELETE privilege
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: false
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
          "ALTER DELETE": true

- name: Check actual append worked
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 1
    - result.executed_statements[0] == 'GRANT ALTER DELETE ON foo.* TO alice WITH GRANT OPTION'

- name: Run append again for idempotency check
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: false
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
          "ALTER DELETE": true

- name: Check append idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

# Test actual exclusive mode (not check mode)
- name: Replace all privileges with exclusive=true
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table2'
        privs:
          "SELECT(z)": true

- name: Check exclusive mode worked
  ansible.builtin.assert:
    that:
    - result is changed
    # Should revoke all existing privileges and grant the new one
    - result.executed_statements | length == 2

- name: Run exclusive grant again for idempotency check
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table2'
        privs:
          "SELECT(z)": true

- name: Check exclusive mode idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

# Test revoking all privileges with state=absent
- name: Grant some privileges to alice for revoke test
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
      - object: '*.*'
        privs:
          "CREATE USER": false

- name: Verify alice has grants
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert alice has grants before revoke
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] | length > 0

- name: Revoke all privileges with state=absent
  register: result
  community.clickhouse.clickhouse_grants:
    state: absent
    grantee: alice

- name: Check revoke worked
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length > 0

- name: Verify alice has no grants after revoke
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert alice has no grants after revoke
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] == []

- name: Run revoke again for idempotency test
  register: result
  community.clickhouse.clickhouse_grants:
    state: absent
    grantee: alice

- name: Check revoke idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

# Test revoking in check mode
- name: Grant some privileges to alice for check mode revoke test
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": false
          "INSERT": true

- name: Revoke all privileges with state=absent in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: absent
    grantee: alice

- name: Check revoke in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length > 0

- name: Verify alice still has grants after check mode revoke
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert alice still has grants (check mode didn't actually revoke)
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] | length > 0

- name: Run revoke in check mode again for idempotency test
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: absent
    grantee: alice

- name: Check revoke idempotency in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length > 0

# Test actual revoke after check mode to clean up
- name: Actually revoke all privileges from alice
  register: result
  community.clickhouse.clickhouse_grants:
    state: absent
    grantee: alice

- name: Check actual revoke worked
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length > 0

- name: Verify alice has no grants after actual revoke
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert alice has no grants
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] == []
