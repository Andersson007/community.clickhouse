####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- name: Create a test dabase
  community.clickhouse.clickhouse_client:
    execute: CREATE DATABASE IF NOT EXISTS foo

- name: Create a test table
  register: result
  community.clickhouse.clickhouse_client:
    login_host: localhost
    execute: >
      CREATE TABLE IF NOT EXISTS foo.test_table1
      (x String) ENGINE = Memory
    execute_kwargs:
      types_check: false

- name: Insert into test table using named args
  register: result
  community.clickhouse.clickhouse_client:
    execute: "INSERT INTO foo.test_table1 (x) VALUES (%(a)s), (%(b)s), (%(c)s)"
    execute_kwargs:
      params:
        a: one
        b: two
        c: three

- name: Create a test table 2
  register: result
  community.clickhouse.clickhouse_client:
    login_host: localhost
    execute: >
      CREATE TABLE IF NOT EXISTS foo.test_table2
      (y String, z String) ENGINE = Memory
    execute_kwargs:
      types_check: false

- name: Insert into test table using named args
  register: result
  community.clickhouse.clickhouse_client:
    execute: "INSERT INTO foo.test_table2 (y, z) VALUES (%(a)s, %(b)s)"
    execute_kwargs:
      params:
        a: one
        b: two

- name: Create a test user
  community.clickhouse.clickhouse_user:
    state: present
    name: alice
    password: querty

- name: Check the user exists
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check user's grants, they are empty
  ansible.builtin.assert:
    that:
    - result["users"]["alice"]["grants"] == []

- name: Grant privs 
  register: result
  community.clickhouse.clickhouse_client:
    execute: '{{ item }}'
  with_items:
  - GRANT SELECT(x) ON foo.test_table1 TO alice WITH GRANT OPTION
  - GRANT SELECT ON foo.test_table2 TO alice
  - REVOKE SELECT(y) ON foo.test_table2 FROM alice
  - GRANT UPDATE(z) ON foo.test_table2 TO alice
  - GRANT DELETE ON foo.test_table2 TO alice
  - GRANT CREATE TABLE ON foo.* TO alice
  - GRANT CREATE DATABASE ON *.* TO alice
  - GRANT KILL QUERY ON *.* TO alice
  - GRANT CREATE USER ON *.* TO alice
  - GRANT ALTER USER ON *.* TO alice
  - GRANT DROP USER ON *.* TO alice

- name: Get user info
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check user's grants again, not empty
  ansible.builtin.assert:
    that:
    - result["users"]["alice"]["grants"] != []

- name: Grant privs to non-existent grantee, must fail
  register: result
  ignore_errors: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: notexists
    grants:
     global: TEST

- name: Check that it failed
  ansible.builtin.assert:
    that:
    - result is failed
    - result.msg is search("does not exist")

- name: Grant privs
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    grants:
     global: TEST

- name: Check
  ansible.builtin.assert:
    that:
    - result is changed
    # TODO Must be updated to use diff
    - result["start_grants"] != {}
    - result["end_grants"] != {}
