####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- name: Create a test dabase
  community.clickhouse.clickhouse_client:
    execute: CREATE DATABASE IF NOT EXISTS foo

- name: Create a test table
  register: result
  community.clickhouse.clickhouse_client:
    login_host: localhost
    execute: >
      CREATE TABLE IF NOT EXISTS foo.test_table1
      (x String) ENGINE = Memory
    execute_kwargs:
      types_check: false

- name: Insert into test table using named args
  register: result
  community.clickhouse.clickhouse_client:
    execute: "INSERT INTO foo.test_table1 (x) VALUES (%(a)s), (%(b)s), (%(c)s)"
    execute_kwargs:
      params:
        a: one
        b: two
        c: three

- name: Create a test table 2
  register: result
  community.clickhouse.clickhouse_client:
    login_host: localhost
    execute: >
      CREATE TABLE IF NOT EXISTS foo.test_table2
      (y String, z String) ENGINE = Memory
    execute_kwargs:
      types_check: false

- name: Insert into test table using named args
  register: result
  community.clickhouse.clickhouse_client:
    execute: "INSERT INTO foo.test_table2 (y, z) VALUES (%(a)s, %(b)s)"
    execute_kwargs:
      params:
        a: one
        b: two

- name: Create a test user
  community.clickhouse.clickhouse_user:
    state: present
    name: alice
    password: querty

- name: Check the user exists
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check user's grants, they are empty
  ansible.builtin.assert:
    that:
    - result["users"]["alice"]["grants"] == []

- name: Grant privs to non-existent grantee, must fail
  register: result
  ignore_errors: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: notexists
    privileges:
     - object: '*.*'
       privs:
         TEST: false

- name: Check that it failed
  ansible.builtin.assert:
    that:
    - result is failed
    - result.msg is search("does not exist")

- name: Grant initial privileges to alice
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
      - object: '*.*'
        privs:
          "CREATE USER": false

- name: Check initial grant
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 3

- name: Run the same grant again to check for idempotency
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
      - object: '*.*'
        privs:
          "CREATE USER": false

- name: Check idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

- name: Append privileges with exclusive=false (default)
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": true
          "INSERT": false
          "DELETE": true
      - object: '*.*'
        privs:
          "CREATE USER": false
          "ALTER USER": true

- name: Check appended privileges
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 2

- name: Grant privileges with exclusive=true
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table1'
        privs:
          "SELECT(x)": false

- name: Check exclusive grant
  ansible.builtin.assert:
    that:
    - result is changed
    # 2 revokes and 1 grant
    - result.executed_statements | length == 3

- name: Run exclusive grant again for idempotency
  register: result
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    exclusive: true
    privileges:
      - object: 'foo.test_table1'
        privs:
          "SELECT(x)": false

- name: Check exclusive grant idempotency
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements | length == 0

- name: Revoke all from alice for cleanup
  community.clickhouse.clickhouse_client:
    execute: "REVOKE ALL ON *.* FROM alice"

- name: Grant privileges in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_grants:
    state: present
    grantee: alice
    privileges:
      - object: 'foo.*'
        privs:
          "SELECT": false

- name: Check grant in check mode
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements | length == 0

- name: Get user info to verify no changes were made
  register: result_info
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Assert no grants for alice after check mode run
  ansible.builtin.assert:
    that:
    - result_info["users"]["alice"]["grants"] == []
