####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- name: Create test_user in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty

- name: Check ret values in 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements == ["CREATE USER test_user IDENTIFIED WITH sha256_password BY '********'"]

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost
    client_kwargs:
      connect_timeout: 20

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"] is not defined

- name: Create test_user
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost
    client_kwargs:
      connect_timeout: 20

- name: Test 2 - Check result
  ansible.builtin.assert:
    that:
    - result["users"]["test_user"] != {}

- name: Create test_user if it exists
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Drop test_user
  community.clickhouse.clickhouse_user:
    state: absent
    name: test_user

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost
    client_kwargs:
      connect_timeout: 20

- name: Check result
  ansible.builtin.assert:
    that:
    - result["users"]["test_user"] is not defined

- name: Drop test_user if it does not exists
  register: result
  community.clickhouse.clickhouse_user:
    state: absent
    name: test_user

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Create test_user
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty

- name: Create test_user again with update_password always
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty
    update_password: always

- name: Check result
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements == ["ALTER USER test_user IDENTIFIED WITH sha256_password BY '********'"]

- name: Drop test_user
  community.clickhouse.clickhouse_user:
    state: absent
    name: test_user

- name: Create test_user with settings
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty
    settings:
      - max_memory_usage = 15000 READONLY
      - max_memory_usage_for_all_queries = 15000 MIN 15000 MAX 16000 WRITABLE

- name: Check result
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements != []

- name: Update user settings in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    settings:
      - max_memory_usage = 20000 READONLY

- name: Check ret values
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "ALTER USER test_user SETTINGS max_memory_usage = 20000 READONLY"

- name: Update user settings in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    settings:
      - max_memory_usage = 20000 READONLY

- name: Check ret values
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "ALTER USER test_user SETTINGS max_memory_usage = 20000 READONLY"

- name: Verify settings in database using clickhouse_client
  register: result
  community.clickhouse.clickhouse_client:
    execute: "SHOW CREATE USER test_user"

- name: Debug - show CREATE USER output
  ansible.builtin.debug:
    var: result.result

- name: Check that settings are present in CREATE USER statement
  ansible.builtin.assert:
    that:
    - result.result[0][0] is search("SETTINGS")
    - result.result[0][0] is search("max_memory_usage")
    - result.result[0][0] is search("20000")

- name: Update user settings again with same values
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    settings:
      - max_memory_usage = 20000 READONLY

- name: Check that settings update is idempotent (no change when same)
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Update user without specifying settings
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user

- name: Check that not specifying settings does not update them
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Update user settings with multiple settings
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    settings:
      - max_memory_usage = 25000 READONLY
      - max_threads = 8
      - PROFILE 'readonly'

- name: Check ret values
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "ALTER USER test_user SETTINGS max_memory_usage = 25000 READONLY, max_threads = 8, PROFILE 'readonly'"

- name: Verify multiple settings in database using clickhouse_client
  register: result
  community.clickhouse.clickhouse_client:
    execute: "SHOW CREATE USER test_user"

- name: Check that all settings are present in CREATE USER statement
  ansible.builtin.assert:
    that:
    - result.result[0][0] is search("SETTINGS")
    - result.result[0][0] is search("max_memory_usage")
    - result.result[0][0] is search("25000")
    - result.result[0][0] is search("max_threads")
    - result.result[0][0] is search("8")
    - result.result[0][0] is search("readonly")

# Test roles and default_roles argument
- name: Create test roles
  loop:
  - accountant
  - manager
  - sales
  - test_listed_only
  community.clickhouse.clickhouse_role:
    name: "{{ item }}"
  
- name: Set default role in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    - manager
    default_roles:
    - accountant
    - manager

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT accountant, manager TO test_user" or result.executed_statements[0] == "GRANT manager, accountant TO test_user"
    - result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE accountant, manager" or result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE manager, accountant"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == []
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Set default role in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    - manager
    default_roles:
    - accountant
    - manager

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT accountant, manager TO test_user" or result.executed_statements[0] == "GRANT manager, accountant TO test_user"
    - result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE accountant, manager" or result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE manager, accountant"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant", "manager"] or result["users"]["test_user"]["roles"] == ["manager", "accountant"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant", "manager"]

- name: Grant and set another role as default in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - sales
    default_roles:
    - sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT sales TO test_user"
    - result.executed_statements[1] == "REVOKE accountant, manager FROM test_user" or result.executed_statements[1] == "REVOKE manager, accountant FROM test_user"
    - result.executed_statements[2] == "ALTER USER test_user DEFAULT ROLE sales"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check the state has not been changed
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant", "manager"] or result["users"]["test_user"]["roles"] == ["manager", "accountant"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant", "manager"] or result["users"]["test_user"]["default_roles_list"] == ["manager", "accountant"]

- name: Set another role as default in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles: sales
    default_roles: sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT sales TO test_user"
    - result.executed_statements[1] == "REVOKE accountant, manager FROM test_user" or result.executed_statements[1] == "REVOKE manager, accountant FROM test_user"
    - result.executed_statements[2] == "ALTER USER test_user DEFAULT ROLE sales"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales"]
    - result["users"]["test_user"]["default_roles_list"] == ["sales"]

- name: Set the role again
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - sales
    default_roles:
    - sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Set the role again in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - sales
    default_roles:
    - sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Append the first role in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    default_roles:
    - accountant
    roles_mode: append
    default_roles_mode: append

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT accountant TO test_user"
    - result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE sales, accountant" or result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE accountant, sales"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales", "accountant"] or result["users"]["test_user"]["roles"] == ["accountant", "sales"]
    - result["users"]["test_user"]["default_roles_list"] == ["sales", "accountant"] or result["users"]["test_user"]["default_roles_list"] == ["accountant", "sales"]

- name: Unset all default roles in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    default_roles: []

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "SET DEFAULT ROLE NONE TO test_user"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales", "accountant"] or result["users"]["test_user"]["roles"] == ["accountant", "sales"]
    - result["users"]["test_user"]["default_roles_list"] == ["sales", "accountant"] or result["users"]["test_user"]["default_roles_list"] == ["accountant", "sales"]

- name: Unset all default roles in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    default_roles: []

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "SET DEFAULT ROLE NONE TO test_user"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales", "accountant"] or result["users"]["test_user"]["roles"] == ["accountant", "sales"]
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Revoke all roles in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles: []

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "REVOKE accountant, sales FROM test_user" or result.executed_statements[0] == "REVOKE sales, accountant FROM test_user"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales", "accountant"] or result["users"]["test_user"]["roles"] == ["accountant", "sales"]
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Revoke all roles in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles: []

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "REVOKE accountant, sales FROM test_user" or result.executed_statements[0] == "REVOKE sales, accountant FROM test_user"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == []
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Revoke all roles and unset all default roles in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles: []
    default_roles: []

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == []
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Revoke all roles and unset all default roles in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles: []
    default_roles: []

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == []
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Set default role in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    - manager
    default_roles:
    - accountant
    - manager

- name: Remove role and default role in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - manager
    default_roles:
    - manager
    roles_mode: remove
    default_roles_mode: remove

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "REVOKE manager FROM test_user"
    - result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE accountant"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant", "manager"] or result["users"]["test_user"]["roles"] == ["manager", "accountant"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant", "manager"]

- name: Remove role and default role in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - manager
    default_roles:
    - manager
    roles_mode: remove
    default_roles_mode: remove

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "REVOKE manager FROM test_user"
    - result.executed_statements[1] == "ALTER USER test_user DEFAULT ROLE accountant"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant"]

- name: Remove role and default role in real mode again
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - manager
    default_roles:
    - manager
    roles_mode: remove
    default_roles_mode: remove

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant"]

# https://github.com/ansible-collections/community.clickhouse/issues/97
- name: Grant listed only roles in real mode for a new user
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user_1
    roles:
    - test_listed_only
    default_roles:
    - test_listed_only
    roles_mode: listed_only
    default_roles_mode: listed_only

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "CREATE USER test_user_1"
    - result.executed_statements[1] == "GRANT test_listed_only TO test_user_1"
    - result.executed_statements[2] == "ALTER USER test_user_1 DEFAULT ROLE test_listed_only"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user_1"]["roles"] == ["test_listed_only"]
    - result["users"]["test_user_1"]["default_roles_list"] == ["test_listed_only"]
