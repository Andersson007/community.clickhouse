####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- name: Create test_user in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty

- name: Check ret values in 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements == ["CREATE USER test_user IDENTIFIED WITH sha256_password BY '********'"]

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost
    client_kwargs:
      connect_timeout: 20

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"] is not defined

- name: Create test_user
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost
    client_kwargs:
      connect_timeout: 20

- name: Test 2 - Check result
  ansible.builtin.assert:
    that:
    - result["users"]["test_user"] != {}

- name: Create test_user if it exists
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Drop test_user
  community.clickhouse.clickhouse_user:
    state: absent
    name: test_user

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost
    client_kwargs:
      connect_timeout: 20

- name: Check result
  ansible.builtin.assert:
    that:
    - result["users"]["test_user"] is not defined

- name: Drop test_user if it does not exists
  register: result
  community.clickhouse.clickhouse_user:
    state: absent
    name: test_user

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Create test_user
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty

- name: Create test_user again with update_password always
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty
    update_password: always

- name: Check result
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements == ["ALTER USER test_user IDENTIFIED WITH sha256_password BY '********'"]

- name: Drop test_user
  community.clickhouse.clickhouse_user:
    state: absent
    name: test_user

- name: Create test_user with settings
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    password: querty
    settings:
      - max_memory_usage = 15000 READONLY
      - max_memory_usage_for_all_queries = 15000 MIN 15000 MAX 16000 WRITABLE

- name: Check result
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements != []

# Test default_roles argument
- name: Create test roles
  loop:
  - accountant
  - manager
  - sales
  community.clickhouse.clickhouse_role:
    name: "{{ item }}"
  
- name: Set default role in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    - manager
    default_roles:
    - accountant
    - manager

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements == ["GRANT accountant, manager TO test_user", "ALTER USER test_user DEFAULT ROLE accountant, manager"]

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == []
    - result["users"]["test_user"]["default_roles_list"] == []

- name: Set default role in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    - manager
    default_roles:
    - accountant
    - manager

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements == ["GRANT accountant, manager TO test_user", "ALTER USER test_user DEFAULT ROLE accountant, manager"]

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant", "manager"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant", "manager"]

- name: Set another role as default in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - sales
    default_roles:
    - sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT sales TO test_user"
    - result.executed_statements[1] == "REVOKE account, manager FROM test_user"
    - result.executed_statements[2] == "ALTER USER test_user DEFAULT ROLE sales"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check the state has not been changed
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["accountant", "manager"]
    - result["users"]["test_user"]["default_roles_list"] == ["accountant", "manager"]

- name: Set another role as default in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles: sales
    default_roles: sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == "GRANT sales TO test_user"
    - result.executed_statements[1] == "REVOKE account, manager FROM test_user"
    - result.executed_statements[2] == "ALTER USER test_user DEFAULT ROLE sales"

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales"]
    - result["users"]["test_user"]["default_roles_list"] == ["sales"]

- name: Set the role again
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - sales
    default_roles:
    - sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Set the role again in check mode
  register: result
  check_mode: true
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - sales
    default_roles:
    - sales

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is not changed
    - result.executed_statements == []

- name: Append the first role in real mode
  register: result
  community.clickhouse.clickhouse_user:
    state: present
    name: test_user
    roles:
    - accountant
    default_roles:
    - accountant
    append_roles: true
    append_default_roles: true

- name: Check ret values 
  ansible.builtin.assert:
    that:
    - result is changed
    - result.executed_statements[0] == ["GRANT accountant TO test_user"]
    - result.executed_statements[1] == ["ALTER USER test_user DEFAULT ROLE sales, accountant"]

- name: Check the actual state
  register: result
  community.clickhouse.clickhouse_info:
    login_host: localhost

- name: Check result
  ansible.builtin.assert:
    that:
    - result is not changed
    - result["users"]["test_user"]["roles"] == ["sales", "accountant"]
    - result["users"]["test_user"]["default_roles_list"] == ["sales", "accountant"]
